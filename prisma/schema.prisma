// docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String          @id // 認証プロバイダーのユーザーID
  name          String
  email         String          @unique
  role          Role            @default(USER)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  projectEntries ProjectEntry[] @relation("UserToProjectEntry")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Project {
  id                String              @id @default(uuid())
  summary           String
  deadline          DateTime            @db.Date
  unitPrice         Int                 @map("unit_price")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  projectEntries    ProjectEntry[]      @relation("ProjectToProjectEntry")
  skillRequirements SkillRequirement[]  @relation("ProjectToSkillRequirement")

  @@map("projects")
}

model ProjectEntry {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation("UserToProjectEntry", fields: [userId], references: [id])
  project   Project  @relation("ProjectToProjectEntry", fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@map("project_entries")
}

model Skill {
  id                String             @id @default(uuid())
  skillName         String             @map("skill_name")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  skillRequirements SkillRequirement[] @relation("SkillToSkillRequirement")

  @@map("skills")
}

model SkillRequirement {
  id        String   @id @default(uuid())
  projectId String   @map("project_id")
  skillId   String   @map("skill_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  project   Project  @relation("ProjectToSkillRequirement", fields: [projectId], references: [id])
  skill     Skill    @relation("SkillToSkillRequirement", fields: [skillId], references: [id])

  @@index([projectId])
  @@index([skillId])
  @@map("skill_requirements")
}